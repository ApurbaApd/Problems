#include <iostream>
using namespace std;

##ifndef SYMBOL
#define mod 1000000007
#define lli long long int
#define REP(i, n) for(int i=1;i<=n;i++)

lli arr[3];//array of size 3
lli I[3][3], T[3][3];//I->Identity Matrix and T->Transition matrix

//multiplication of A and B
void mul(lli A[3][3], lli B[3][3],int dim){

   lli res[dim+1][dim+1];//[3][3]->result

   REP(i,dim) REP(j,dim){

      res[i][j] = 0;

      REP(k, dim){

      	// res[i][j] += A[i][k] * B[k][j];
      	lli x = (A[i][k] * B[k][j]) % mod;
      	res[i][j] = (res[i][j]+x) % mod;

      }

   }
   //copying result into A
   REP(i,dim) REP(j, dim) A[i][j] = res[i][j];


}

lli getFib(int n){

	if(n <=2) return arr[n];

	//elements of identity matrix
	I[1][1]= I[2][2]=1;
	I[1][2]= I[2][1]=0;

	//elements of Transition matrix
	T[1][1]= 0;
	T[1][2]= T[2][1]= T[2][2]= 1;


	//Calculate Transition matrix to the power n-1
	n = n-1;
    
    //Till n>0
	while(n){

		if(n%2)//if n is odd
			//result is being saved into I
			mul(I, T, 2), n--;// I = I * T and dimension is 2
		else
			mul(T,T,2), n/=2;//T= T*T

	}

    //multiplication equation to find Fn
	lli Fn = (arr[1] * I[1][1] + arr[2] * I[2][1]) % mod;

	return Fn;


}

int main(){

	int t,n;//t->test cases n->nth term that we have to print
	cin>>t;
	while(t--){
		//first and second array element taken
		cin>>arr[1]>>arr[2]>>n, n++;
		cout<<getFib(n)<<endl;//will return nth term of fibonacci series

	}


}
